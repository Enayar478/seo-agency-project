---
import { getCategories, getCategory, getArticle, getTopicsByCategory, getArticlesByTopic } from '../../../../lib/directus';
import type { GetStaticPaths } from 'astro';
import Layout from '../../../../layouts/Layout.astro';
import Breadcrumbs from '../../../../components/Breadcrumbs.astro';

export const getStaticPaths = (async () => {
  const categories = await getCategories();
  const paths = [];

  for (const category of categories) {
    console.log(`Processing category: ${category.titre}`);
    const topics = await getTopicsByCategory(category.id, category.slug);
    
    for (const topic of topics) {
      console.log(`Processing topic: ${topic.titre}`);
      const articles = await getArticlesByTopic(topic.id, category.slug);
      
      for (const article of articles) {
        console.log(`Processing article: ${article.titre}`);
        const slug = article.url.split('/').pop();
        paths.push({
          params: {
            category: category.slug,
            slug: slug
          },
          props: { 
            article: {
              ...article,
              topic: {
                ...topic,
                categorie: category
              }
            },
            category 
          }
        });
      }
    }
  }

  console.log(`Generated ${paths.length} paths`);
  return paths;
}) satisfies GetStaticPaths;

const { article, category } = Astro.props;

// S'assurer que h2s est un tableau
const h2s = Array.isArray(article.h2s) ? article.h2s : 
            typeof article.h2s === 'string' ? JSON.parse(article.h2s) : 
            [];

const breadcrumbs = [
  { label: 'Accueil', href: '/' },
  { label: 'Blog', href: '/blog' },
  { label: category.titre, href: `/blog/categories/${category.slug}` },
  { label: article.titre, href: article.url }
];
---

<Layout 
  title={`${article.titre} | SEO Data-Driven`}
  description={article.h1}
>
  <main class="pt-24 pb-16">
    <div class="container mx-auto px-4">
      <Breadcrumbs items={breadcrumbs} />
      
      <article class="max-w-4xl mx-auto">
        <header class="mb-12">
          <h1 class="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mt-8 mb-6">
            {article.h1}
          </h1>
          
          <div class="flex items-center gap-4 text-gray-600 dark:text-gray-400">
            <div class="flex items-center">
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <span>{article.temps_lecture} min de lecture</span>
            </div>
            <div class="flex items-center">
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
              </svg>
              <a href={`/blog/categories/${category.slug}`} class="hover:text-blue-600 dark:hover:text-blue-400">
                {category.titre}
              </a>
            </div>
          </div>
        </header>

        <div class="prose prose-lg dark:prose-invert max-w-none">
          <!-- Table des matières -->
          {h2s.length > 0 && (
            <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-6 mb-8">
              <h2 class="text-xl font-semibold mb-4">Table des matières</h2>
              <ul class="space-y-2">
                {h2s.map((h2: string) => (
                  <li>
                    <a
                      href={`#${h2.toLowerCase().replace(/\s+/g, '-')}`}
                      class="text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400"
                    >
                      {h2}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          )}

          <!-- Contenu de l'article -->
          <div class="space-y-8">
            {h2s.length > 0 ? (
              h2s.map((h2: string, index: number) => {
                const sectionId = h2.toLowerCase().replace(/\s+/g, '-');
                return (
                  <section id={sectionId}>
                    <h2 class="text-2xl font-bold mb-4">{h2}</h2>
                    <div class="text-gray-600 dark:text-gray-300" set:html={article.contenu} />
                  </section>
                );
              })
            ) : (
              <div class="text-gray-600 dark:text-gray-300" set:html={article.contenu} />
            )}
          </div>
        </div>
      </article>
    </div>
  </main>
</Layout> 