---
interface Props {
  href?: string;
  type?: "button" | "submit" | "reset";
  variant?: "primary" | "secondary" | "outline" | "ghost";
  size?: "sm" | "md" | "lg";
  fullWidth?: boolean;
  disabled?: boolean;
  loading?: boolean;
  class?: string;
}

const {
  href,
  type = "button",
  variant = "primary",
  size = "md",
  fullWidth = false,
  disabled = false,
  loading = false,
  class: className = "",
} = Astro.props;

// Classes de base communes
const baseClasses = "inline-flex items-center justify-center font-medium rounded-lg transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 dark:focus:ring-offset-gray-800";

// Classes spécifiques à la taille
const sizeClasses = {
  sm: "px-3 py-1.5 text-sm",
  md: "px-4 py-2 text-base",
  lg: "px-6 py-3 text-lg"
};

// Classes spécifiques à la variante
const variantClasses = {
  primary: "bg-gradient-to-r from-primary-600 via-secondary-600 to-primary-600 text-white hover:from-primary-500 hover:via-secondary-500 hover:to-primary-500 focus:ring-primary-500",
  secondary: "bg-gray-100 text-gray-900 hover:bg-gray-200 focus:ring-gray-500 dark:bg-gray-700 dark:text-gray-100 dark:hover:bg-gray-600",
  outline: "border-2 border-primary-500 text-primary-600 hover:bg-primary-50 focus:ring-primary-500 dark:text-primary-400 dark:hover:bg-primary-900/20",
  ghost: "text-gray-600 hover:bg-gray-100 focus:ring-gray-500 dark:text-gray-300 dark:hover:bg-gray-800"
};

// Classes pour l'état désactivé
const disabledClasses = "opacity-50 cursor-not-allowed pointer-events-none";

// Classes pour la largeur
const widthClasses = fullWidth ? "w-full" : "";

// Combiner toutes les classes
const classes = [
  baseClasses,
  sizeClasses[size],
  variantClasses[variant],
  widthClasses,
  disabled ? disabledClasses : "",
  className
].join(" ");

const Element = href ? "a" : "button";
---

<Element
  {...href ? { href } : { type }}
  class={classes}
  disabled={disabled}
  aria-disabled={disabled}
>
  {loading && (
    <svg
      class="animate-spin -ml-1 mr-2 h-4 w-4"
      fill="none"
      viewBox="0 0 24 24"
    >
      <circle
        class="opacity-25"
        cx="12"
        cy="12"
        r="10"
        stroke="currentColor"
        stroke-width="4"
      />
      <path
        class="opacity-75"
        fill="currentColor"
        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
      />
    </svg>
  )}
  
  <span class="relative">
    <slot />
    {variant === "primary" && (
      <span class="absolute inset-0 w-full h-full transition-all duration-300 opacity-0 group-hover:opacity-25 bg-[radial-gradient(circle_at_center,_white_0%,_transparent_100%)]"></span>
    )}
  </span>

  {href && (
    <svg
      class="w-4 h-4 ml-1.5 transform group-hover:translate-x-1 transition-transform"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M9 5l7 7-7 7"
      />
    </svg>
  )}
</Element>

<style>
  @keyframes pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
  }

  button:active, a:active {
    transform: translateY(1px);
  }

  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
</style> 