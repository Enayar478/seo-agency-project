---
interface Props {
  title: string;
  description: string;
  icon: string;
  href: string;
  features?: string[];
}

const { title, description, icon, href, features = [] } = Astro.props;
---

<div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8 transition-transform hover:scale-105">
  <div class="text-4xl mb-6">{icon}</div>
  
  <h3 class="text-xl font-bold mb-4 text-gray-900 dark:text-white">
    {title}
  </h3>
  
  <p class="text-gray-600 dark:text-gray-300 mb-6">
    {description}
  </p>
  
  {features.length > 0 && (
    <ul class="space-y-2 mb-6">
      {features.map(feature => (
        <li class="flex items-center text-gray-600 dark:text-gray-300">
          <svg class="w-5 h-5 text-blue-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
          </svg>
          {feature}
        </li>
      ))}
    </ul>
  )}
  
  <a
    href={href}
    class="inline-flex items-center text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"
  >
    En savoir plus
    <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
    </svg>
  </a>
</div>

<script define:vars={{ title, description }}>
// Schema.org Service
const schema = {
  "@context": "https://schema.org",
  "@type": "Service",
  "name": title,
  "description": description
};

const script = document.createElement('script');
script.setAttribute('type', 'application/ld+json');
script.textContent = JSON.stringify(schema);
document.head.appendChild(script);
</script> 