---
const navigation = [
  { name: 'Accueil', href: '/' },
  { name: 'Services', href: '/services' },
  { name: 'Méthodologie', href: '/methodologie' },
  { name: 'Contact', href: '/contact' }
];

const currentPath = Astro.url.pathname;
---

<header class="fixed w-full bg-white/95 backdrop-blur-sm dark:bg-gray-900/95 shadow-sm z-50 transition-all duration-300">
  <nav class="container mx-auto px-4 py-4">
    <div class="flex items-center justify-between">
      <a href="/" class="text-xl sm:text-2xl font-bold text-blue-600 transition-colors duration-300">
        SEO Data-Driven
      </a>

      <!-- Mobile Navigation Button -->
      <button
        id="mobileMenuButton"
        class="p-2 text-gray-600 hover:text-blue-600 dark:text-gray-300 dark:hover:text-blue-500 md:hidden transition-colors duration-300"
        aria-label="Menu"
        aria-expanded="false"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path 
            id="menuIcon"
            class="transition-transform duration-300"
            stroke-linecap="round" 
            stroke-linejoin="round" 
            stroke-width="2" 
            d="M4 6h16M4 12h16M4 18h16"
          />
        </svg>
      </button>

      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center space-x-8">
        {navigation.map(item => (
          <a
            href={item.href}
            class:list={[
              "text-gray-600 hover:text-blue-600 dark:text-gray-300 dark:hover:text-blue-500 transition-colors duration-300",
              { "font-semibold text-blue-600 dark:text-blue-500": currentPath === item.href }
            ]}
          >
            {item.name}
          </a>
        ))}
        <a
          href="/audit-gratuit"
          class="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors duration-300 text-sm sm:text-base"
        >
          Audit gratuit
        </a>
      </div>
    </div>

    <!-- Mobile Navigation Menu -->
    <div
      id="mobileMenu"
      class="hidden md:hidden mt-4 pb-4 transition-all duration-300 ease-in-out opacity-0 transform -translate-y-2"
    >
      <div class="flex flex-col space-y-4">
        {navigation.map(item => (
          <a
            href={item.href}
            class:list={[
              "text-gray-600 hover:text-blue-600 dark:text-gray-300 dark:hover:text-blue-500 transition-colors duration-300 text-lg",
              { "font-semibold text-blue-600 dark:text-blue-500": currentPath === item.href }
            ]}
          >
            {item.name}
          </a>
        ))}
        <a
          href="/audit-gratuit"
          class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors duration-300 text-center text-lg"
        >
          Audit gratuit
        </a>
      </div>
    </div>
  </nav>
</header>

<script>
  const mobileMenuButton = document.getElementById('mobileMenuButton');
  const mobileMenu = document.getElementById('mobileMenu');
  const menuIcon = document.getElementById('menuIcon');

  if (mobileMenuButton && mobileMenu) {
    mobileMenuButton.addEventListener('click', () => {
      const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
      
      // Mettre à jour l'état du bouton
      mobileMenuButton.setAttribute('aria-expanded', (!isExpanded).toString());
      
      // Animer le menu
      mobileMenu.classList.toggle('hidden');
      
      // Attendre le prochain frame pour ajouter/retirer les classes d'animation
      requestAnimationFrame(() => {
        if (!isExpanded) {
          mobileMenu.classList.remove('opacity-0', '-translate-y-2');
          menuIcon.style.transform = 'rotate(90deg)';
        } else {
          mobileMenu.classList.add('opacity-0', '-translate-y-2');
          menuIcon.style.transform = 'rotate(0deg)';
          
          // Cacher le menu après l'animation
          setTimeout(() => {
            if (mobileMenuButton.getAttribute('aria-expanded') === 'false') {
              mobileMenu.classList.add('hidden');
            }
          }, 300);
        }
      });
    });
  }

  // Gérer la transparence du header au scroll
  const header = document.querySelector('header');
  let lastScroll = 0;

  window.addEventListener('scroll', () => {
    const currentScroll = window.pageYOffset;
    
    if (currentScroll <= 0) {
      header.classList.remove('bg-white/95', 'dark:bg-gray-900/95');
      header.classList.add('bg-white', 'dark:bg-gray-900');
    } else {
      header.classList.add('bg-white/95', 'dark:bg-gray-900/95');
      header.classList.remove('bg-white', 'dark:bg-gray-900');
    }
    
    lastScroll = currentScroll;
  });
</script> 