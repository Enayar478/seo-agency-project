---
const navigation = [
  { name: 'Accueil', href: '/' },
  { name: 'Services', href: '/services' },
  { name: 'Méthodologie', href: '/methodologie' },
  { name: 'Blog', href: '/blog' },
  { name: 'Contact', href: '/contact' }
];

const currentPath = Astro.url.pathname;
---

<header class="fixed w-full backdrop-blur-xl bg-black/50 z-50 border-b border-violet-500/20">
  <nav class="container mx-auto px-4 sm:px-6 lg:px-8 py-4">
    <div class="flex items-center justify-between">
      <a href="/" class="relative group">
        <span class="text-2xl sm:text-3xl font-bold bg-gradient-to-r from-violet-500 via-blue-500 to-violet-500 bg-clip-text text-transparent">
          HorizonReach
        </span>
        <span class="absolute -bottom-1 left-0 w-0 h-0.5 bg-gradient-to-r from-violet-500 via-blue-500 to-violet-500 transition-all group-hover:w-full"></span>
      </a>

      <!-- Mobile Navigation Button -->
      <button
        id="mobileMenuButton"
        class="inline-flex items-center justify-center p-2 rounded-lg text-gray-300 hover:text-violet-400 hover:bg-gray-800/50 md:hidden transition-all duration-300"
        aria-label="Menu"
        aria-expanded="false"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path 
            id="menuIcon"
            class="transition-transform duration-300"
            stroke-linecap="round" 
            stroke-linejoin="round" 
            stroke-width="2" 
            d="M4 6h16M4 12h16M4 18h16"
          />
        </svg>
      </button>

      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center space-x-1 lg:space-x-6">
        {navigation.map(item => (
          <a
            href={item.href}
            class:list={[
              "px-4 py-2 rounded-lg text-sm lg:text-base font-medium transition-all duration-300 hover:bg-violet-500/10 relative group",
              currentPath === item.href || currentPath.startsWith(item.href + '/') 
                ? "text-violet-400" 
                : "text-gray-300 hover:text-violet-400"
            ]}
          >
            {item.name}
            <span class="absolute bottom-0 left-0 w-0 h-0.5 bg-violet-500 transition-all group-hover:w-full"></span>
          </a>
        ))}
        <a
          href="/audit-gratuit"
          class="relative px-6 py-2 font-semibold text-white rounded-lg overflow-hidden group"
        >
          <div class="absolute inset-0 w-full h-full transition-all duration-300 bg-gradient-to-r from-violet-600 via-blue-600 to-violet-600 group-hover:bg-gradient-to-r group-hover:from-violet-500 group-hover:via-blue-500 group-hover:to-violet-500"></div>
          <div class="absolute inset-0 w-full h-full transition-all duration-300 opacity-0 group-hover:opacity-25 bg-[radial-gradient(circle_at_center,_white_0%,_transparent_100%)]"></div>
          <span class="relative">Audit gratuit</span>
        </a>
      </div>
    </div>

    <!-- Mobile Navigation Menu -->
    <div
      id="mobileMenu"
      class="hidden md:hidden mt-4 rounded-lg bg-gray-900/95 backdrop-blur-xl border border-violet-500/20 shadow-lg transition-all duration-300 ease-in-out opacity-0 transform -translate-y-2"
    >
      <div class="px-2 pt-2 pb-3 space-y-1">
        {navigation.map(item => (
          <a
            href={item.href}
            class:list={[
              "block px-4 py-2 rounded-lg text-base font-medium transition-all duration-300",
              currentPath === item.href || currentPath.startsWith(item.href + '/') 
                ? "text-violet-400 bg-violet-500/10" 
                : "text-gray-300 hover:text-violet-400 hover:bg-violet-500/10"
            ]}
          >
            {item.name}
          </a>
        ))}
        <a
          href="/audit-gratuit"
          class="block w-full text-center px-4 py-2 mt-4 font-semibold text-white rounded-lg bg-gradient-to-r from-violet-600 via-blue-600 to-violet-600 hover:from-violet-500 hover:via-blue-500 hover:to-violet-500 transition-all duration-300"
        >
          Audit gratuit
        </a>
      </div>
    </div>
  </nav>
</header>

<script>
  const mobileMenuButton = document.getElementById('mobileMenuButton');
  const mobileMenu = document.getElementById('mobileMenu');
  const menuIcon = document.getElementById('menuIcon');

  if (mobileMenuButton && mobileMenu) {
    mobileMenuButton.addEventListener('click', () => {
      const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
      
      // Mettre à jour l'état du bouton
      mobileMenuButton.setAttribute('aria-expanded', (!isExpanded).toString());
      
      // Animer le menu
      mobileMenu.classList.toggle('hidden');
      
      // Attendre le prochain frame pour ajouter/retirer les classes d'animation
      requestAnimationFrame(() => {
        if (!isExpanded) {
          mobileMenu.classList.remove('opacity-0', '-translate-y-2');
          if (menuIcon) menuIcon.style.transform = 'rotate(90deg)';
        } else {
          mobileMenu.classList.add('opacity-0', '-translate-y-2');
          if (menuIcon) menuIcon.style.transform = 'rotate(0deg)';
          
          // Cacher le menu après l'animation
          setTimeout(() => {
            if (mobileMenuButton.getAttribute('aria-expanded') === 'false') {
              mobileMenu.classList.add('hidden');
            }
          }, 300);
        }
      });
    });
  }

  // Gérer la transparence du header au scroll
  const header = document.querySelector('header');
  let lastScroll = 0;

  window.addEventListener('scroll', () => {
    if (!header) return;
    const currentScroll = window.pageYOffset;
    
    if (currentScroll <= 0) {
      header?.classList.remove('bg-white/95', 'dark:bg-gray-900/95');
      header?.classList.add('bg-white', 'dark:bg-gray-900');
    } else {
      header?.classList.add('bg-white/95', 'dark:bg-gray-900/95');
      header?.classList.remove('bg-white', 'dark:bg-gray-900');
    }
    
    lastScroll = currentScroll;
  });
</script> 