---
interface Props {
  items: {
    label: string;
    href?: string;
    current?: boolean;
  }[];
  className?: string;
}

const { items, className = '' } = Astro.props;

// Assurez-vous que les URLs sont valides
const baseUrl = Astro.site ? Astro.site.href : 'http://localhost:4321';
---

<nav aria-label="Breadcrumb" class={`text-sm ${className}`}>
  <ol class="flex flex-wrap items-center space-x-2">
    {items.map((item, index) => (
      <li class="flex items-center">
        {index > 0 && (
          <svg
            class="w-5 h-5 mx-2 text-gray-400 dark:text-gray-500"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M9 5l7 7-7 7"
            />
          </svg>
        )}
        {item.href && !item.current ? (
          <a
            href={item.href}
            class="hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-300"
          >
            {item.label}
          </a>
        ) : (
          <span class={`${item.current ? 'font-medium text-blue-600 dark:text-blue-400' : 'text-gray-500 dark:text-gray-400'}`}>
            {item.label}
          </span>
        )}
      </li>
    ))}
  </ol>
</nav>

<script define:vars={{ items, baseUrl }}>
  // Schema.org breadcrumbs
  const schema = {
    '@context': 'https://schema.org',
    '@type': 'BreadcrumbList',
    'itemListElement': items.map((item, index) => ({
      '@type': 'ListItem',
      'position': index + 1,
      'item': {
        '@id': item.href ? new URL(item.href, baseUrl).href : baseUrl,
        'name': item.label
      }
    }))
  };

  const script = document.createElement('script');
  script.setAttribute('type', 'application/ld+json');
  script.textContent = JSON.stringify(schema);
  document.head.appendChild(script);
</script> 