---
interface Props {
  title: string;
  description: string;
  buttonText?: string;
  downloadUrl?: string;
  delay?: number;
  exitIntent?: boolean;
}

const {
  title,
  description,
  buttonText = "Télécharger",
  downloadUrl = "#",
  delay = 5000,
  exitIntent = true
} = Astro.props;
---

<div
  id="leadCapture"
  class="fixed inset-0 z-50 hidden"
  role="dialog"
  aria-modal="true"
>
  <div class="fixed inset-0 bg-gray-900/80 backdrop-blur-sm transition-opacity animate-fade-in"></div>
  
  <div class="fixed inset-0 overflow-y-auto">
    <div class="flex min-h-full items-center justify-center p-4">
      <div class="w-full max-w-lg transform rounded-card bg-white dark:bg-gray-800 shadow-xl transition-all animate-slide-up">
        <!-- Header -->
        <div class="px-4 py-5 sm:p-6">
          <div class="text-center sm:text-left">
            <h3 class="text-xl sm:text-2xl font-bold text-gray-900 dark:text-white">
              {title}
            </h3>
            <p class="mt-2 text-sm sm:text-base text-gray-600 dark:text-gray-300">
              {description}
            </p>
          </div>
          
          <!-- Form -->
          <form class="mt-6 space-y-4" id="leadCaptureForm">
            <div>
              <label
                for="email"
                class="block text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Email professionnel
              </label>
              <input
                type="email"
                name="email"
                id="email"
                class="mt-2 block w-full rounded-lg border-gray-300 dark:border-gray-600 shadow-sm focus:border-primary-500 focus:ring-primary-500 dark:bg-gray-700 dark:text-white sm:text-sm"
                placeholder="vous@entreprise.com"
                required
              />
            </div>
            
            <div class="flex items-start">
              <div class="flex h-5 items-center">
                <input
                  id="privacy"
                  name="privacy"
                  type="checkbox"
                  required
                  class="h-4 w-4 rounded border-gray-300 text-primary-600 focus:ring-primary-500 dark:border-gray-600 dark:bg-gray-700"
                />
              </div>
              <label
                for="privacy"
                class="ml-2 text-sm text-gray-600 dark:text-gray-300"
              >
                J'accepte la <a href="/privacy" class="text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300">politique de confidentialité</a>
              </label>
            </div>
          </form>
        </div>
        
        <!-- Footer -->
        <div class="bg-gray-50 dark:bg-gray-700/50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6 gap-2">
          <button
            type="submit"
            form="leadCaptureForm"
            class="w-full sm:w-auto inline-flex justify-center items-center px-4 py-2 rounded-lg text-sm font-semibold text-white shadow-sm bg-gradient-to-r from-primary-600 via-secondary-600 to-primary-600 hover:from-primary-500 hover:via-secondary-500 hover:to-primary-500 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 transition-all duration-300"
          >
            {buttonText}
          </button>
          <button
            type="button"
            id="closeModal"
            class="mt-3 sm:mt-0 w-full sm:w-auto inline-flex justify-center items-center px-4 py-2 rounded-lg text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 shadow-sm hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 transition-all duration-300"
          >
            Fermer
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ delay, exitIntent, downloadUrl }}>
  const modal = document.getElementById('leadCapture');
  const closeButton = document.getElementById('closeModal');
  const form = document.getElementById('leadCaptureForm');
  
  // Show modal after delay
  if (!exitIntent) {
    setTimeout(() => {
      modal.classList.remove('hidden');
    }, delay);
  }
  
  // Exit intent detection
  if (exitIntent) {
    let showOnExit = true;
    
    document.addEventListener('mouseleave', (e) => {
      if (e.clientY <= 0 && showOnExit) {
        modal.classList.remove('hidden');
        showOnExit = false;
      }
    });
  }
  
  // Close modal
  closeButton.addEventListener('click', () => {
    modal.classList.add('hidden');
  });
  
  // Handle form submission
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    try {
      const response = await fetch('/', {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: new URLSearchParams(formData).toString()
      });
      
      if (response.ok) {
        // Download file
        if (downloadUrl) {
          window.location.href = downloadUrl;
        }
        modal.classList.add('hidden');
        form.reset();
      } else {
        throw new Error('Erreur lors de l\'envoi du formulaire');
      }
    } catch (error) {
      alert('Une erreur est survenue. Veuillez réessayer.');
      console.error('Erreur:', error);
    }
  });
  
  // Close on click outside
  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.classList.add('hidden');
    }
  });
  
  // Close on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
      modal.classList.add('hidden');
    }
  });
</script> 