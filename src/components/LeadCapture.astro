---
interface Props {
  title: string;
  description: string;
  buttonText?: string;
  downloadUrl?: string;
  delay?: number;
  exitIntent?: boolean;
}

const {
  title,
  description,
  buttonText = "Télécharger",
  downloadUrl = "#",
  delay = 5000,
  exitIntent = true
} = Astro.props;
---

<div
  id="leadCapture"
  class="fixed inset-0 bg-gray-900 bg-opacity-50 z-50 hidden"
  role="dialog"
  aria-modal="true"
>
  <div class="min-h-screen px-4 text-center">
    <div class="inline-block align-middle bg-white dark:bg-gray-800 rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
      <div class="bg-white dark:bg-gray-800 px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
        <div class="sm:flex sm:items-start">
          <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
            <h3
              class="text-2xl leading-6 font-bold text-gray-900 dark:text-white mb-4"
              id="modal-title"
            >
              {title}
            </h3>
            <div class="mt-2">
              <p class="text-gray-600 dark:text-gray-300">
                {description}
              </p>
            </div>
            
            <form class="mt-6 space-y-4" id="leadCaptureForm">
              <div>
                <label
                  for="email"
                  class="block text-sm font-medium text-gray-700 dark:text-gray-300"
                >
                  Email professionnel
                </label>
                <input
                  type="email"
                  name="email"
                  id="email"
                  class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                  placeholder="vous@entreprise.com"
                  required
                />
              </div>
              
              <div class="flex items-start">
                <div class="flex items-center h-5">
                  <input
                    id="privacy"
                    name="privacy"
                    type="checkbox"
                    required
                    class="w-4 h-4 border border-gray-300 rounded bg-gray-50 focus:ring-3 focus:ring-blue-300 dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-blue-600"
                  />
                </div>
                <label
                  for="privacy"
                  class="ml-2 text-sm text-gray-600 dark:text-gray-300"
                >
                  J'accepte la <a href="/privacy" class="text-blue-600 hover:underline">politique de confidentialité</a>
                </label>
              </div>
            </form>
          </div>
        </div>
      </div>
      
      <div class="bg-gray-50 dark:bg-gray-700 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
        <button
          type="submit"
          form="leadCaptureForm"
          class="w-full inline-flex justify-center rounded-lg border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm"
        >
          {buttonText}
        </button>
        <button
          type="button"
          id="closeModal"
          class="mt-3 w-full inline-flex justify-center rounded-lg border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-700"
        >
          Fermer
        </button>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ delay, exitIntent, downloadUrl }}>
  const modal = document.getElementById('leadCapture');
  const closeButton = document.getElementById('closeModal');
  const form = document.getElementById('leadCaptureForm');
  
  // Show modal after delay
  if (!exitIntent) {
    setTimeout(() => {
      modal.classList.remove('hidden');
    }, delay);
  }
  
  // Exit intent detection
  if (exitIntent) {
    let showOnExit = true;
    
    document.addEventListener('mouseleave', (e) => {
      if (e.clientY <= 0 && showOnExit) {
        modal.classList.remove('hidden');
        showOnExit = false;
      }
    });
  }
  
  // Close modal
  closeButton.addEventListener('click', () => {
    modal.classList.add('hidden');
  });
  
  // Handle form submission
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    try {
      const response = await fetch('/', {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: new URLSearchParams(formData).toString()
      });
      
      if (response.ok) {
        // Download file
        if (downloadUrl) {
          window.location.href = downloadUrl;
        }
        modal.classList.add('hidden');
        form.reset();
      } else {
        throw new Error('Erreur lors de l\'envoi du formulaire');
      }
    } catch (error) {
      alert('Une erreur est survenue. Veuillez réessayer.');
      console.error('Erreur:', error);
    }
  });
  
  // Close on click outside
  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.classList.add('hidden');
    }
  });
  
  // Close on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
      modal.classList.add('hidden');
    }
  });
</script> 