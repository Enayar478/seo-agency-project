---
interface Props {
  title: string;
  description: string;
  url: string;
  readingTime: number;
  category: string;
  categoryUrl: string;
}

const { title, description, url, readingTime, category, categoryUrl } = Astro.props;
---

<article class="bg-white dark:bg-gray-800 rounded-xl shadow-sm hover:shadow-md transition-all duration-300">
  <div class="p-6">
    <div class="flex items-center space-x-2 mb-4">
      <a 
        href={categoryUrl}
        class="text-sm font-medium text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300"
      >
        {category}
      </a>
      <span class="text-gray-300 dark:text-gray-600">â€¢</span>
      <span class="text-sm text-gray-600 dark:text-gray-400">
        {readingTime} min de lecture
      </span>
    </div>
    
    <h2 class="text-xl font-bold mb-2">
      <a
        href={url}
        class="text-gray-900 dark:text-white hover:text-blue-600 dark:hover:text-blue-400"
      >
        {title}
      </a>
    </h2>
    
    <p class="text-gray-600 dark:text-gray-300">
      {description}
    </p>
  </div>
</article>

<script define:vars={{ title, description, category, url }}>
  // Schema.org article
  const schema = {
    '@context': 'https://schema.org',
    '@type': 'BlogPosting',
    'headline': title,
    'description': description,
    'articleSection': category,
    'url': new URL(url, Astro.site).href
  };

  const script = document.createElement('script');
  script.setAttribute('type', 'application/ld+json');
  script.textContent = JSON.stringify(schema);
  document.head.appendChild(script);
</script> 